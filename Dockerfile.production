FROM ruby:3.2.2-slim

ENV RAILS_ENV=production
ENV BUNDLER_VERSION='2.4.22'
ENV RAILS_SERVE_STATIC_FILES=true
ENV RAILS_LOG_TO_STDOUT=true
ENV NODE_MAJOR=18

# Instalar dependências do sistema
RUN apt-get update -qq && apt-get install -y \
    build-essential \
    libpq-dev \
    postgresql-client \
    curl \
    ca-certificates \
    gnupg \
    && mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list \
    && apt-get update -qq && apt-get install -y nodejs \
    && npm install -g yarn \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copiar arquivos de dependências primeiro (para cache do Docker)
COPY Gemfile Gemfile.lock package.json yarn.lock ./

# Instalar gems
RUN gem install bundler -v $BUNDLER_VERSION \
    && bundle config --global frozen 1 \
    && bundle config set --local without 'development test' \
    && bundle install --jobs 4 --retry 3

# Instalar dependências JS (incluindo devDependencies para build)
RUN yarn install --frozen-lockfile

# Copiar código fonte
COPY . .

# Executar script de build de assets
RUN chmod +x scripts/build_assets.sh && ./scripts/build_assets.sh

# Limpar devDependencies após build
RUN yarn install --frozen-lockfile --production

# Criar usuário não-root
RUN useradd -m -s /bin/bash rails \
    && chown -R rails:rails /app
USER rails

EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT:-8080}/health || exit 1

# Start Rails server directly
CMD ["bundle", "exec", "rails", "server", "-b", "0.0.0.0"]